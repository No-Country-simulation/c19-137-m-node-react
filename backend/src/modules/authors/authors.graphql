"""
Representa un autor de libros.
"""
type Author {
    id: ID!
    firstName: String!
    lastName: String!
    bio: String
    birthDate: Date
    books: [Book]
}

extend type Query {
    authors: [Author]!
    author(id: ID!): Author!
    authorByName(name: String): [Author!]!
}

extend type Mutation {
    createAuthor(
        data: CreateAuthorInput
    ): CreateAuthorResponse
}

"""
Respuesta de la operación de creación de un libro.
"""
type CreateAuthorResponse {
    "Similar al código de estado HTTP, representa el estado de la operación."
    code: Int!

    "Indica si la operación fue exitosa."
    success: Boolean!

    "Mensaje legible para humanos que describe el resultado de la operación para la UI."
    message: String!

}

"""
Entrada requerida para crear un nuevo libro.
"""
input CreateAuthorInput {
    """
    Nombre del libro.
    """
    firstName: String!

    """
    Apellido del libro.
    """
    lastName: String!

    """
    Autor del libro.
    """
    bio: String!

    """
    Puntuación del libro.
    """
    birthDate: Date!
}